# В упражнении мы потренируемся в создании объектно-ориентированной среды и создадим приложение, проводящее лингвистический анализ.
# Следуйте алгоритму и выполняйте действия последовательно, чтобы получить полноценный класс:


# Создайте класс Word. (Вспомните, какое зарезервированное слово используется для создания класса).
class Word:

    # Добавьте свойства text (класс будет хранить слово) и part (часть речи, которой является слово.
    # Например, существительное, прилагательное и т.п.). Для добавления свойств воспользуйтесь методом __init__.
    def __init__(self, text, part):
        self.text = text
        self.part = part


# Создайте экземпляр класса Word, передав в качестве параметров любое слово и указав его часть речи.
dog = Word('собака', 'сущ')


# Создайте класс Sentence. (по аналогии с п. 1).
class Sentence:
    # Добавьте свойство content. (по аналогии с п. 2).
    def __init__(self, content):
        self.content = content

    # Добавьте в класс Sentence метод show, составляющий предложение.
    # Метод должен перебирать числа из свойства content и подставлять соответствующие слова,
    # которые хранятся в свойстве text экземпляров класса Word. Данные извлекаем из списка words,
    # который получили на прошлом шаге.
    # При соединении слов в предложение не забудьте добавить пробел между словами.
    def show(self):
        sent = ''
        for i in self.content:
            sent = sent + list_words[i].text + ' '
        return sent

    # Добавьте в класс Sentence метод show_parts, отображающий, какие части речи входят в предложение.
    # По аналогии с п. 7 перебирайте в цикле числа из свойства content и сохраняйте результат в отдельный список.
    # Учтите, что части речи могут повторяться, но список не должен содержать дубликаты.
    def show_parts(self):
        parts = [list_words[i].part for i in self.content]
        parts = set(parts)
        parts = list(parts)
        return parts


# Пояснение к дальнейшему коду: content будет хранить список целых чисел, например [0, 1].
# Эти номера необходимы для выбора слов из заранее созданного массива, чтобы сформировать предложение.
# Пример массива:
# words = [["собака", "сущ"],
#          ["ела", "глагол"],
#          ["колбасу", "сущ"],
#          ["вечером", "наречие"]]
# Если content == [0, 2], получим предложение вида «Собака колбасу».

# Создайте из массива (можете взять приведённый выше или придумать свой) список,
# каждый элемент которого является экземпляром класса Word.
# Примечание: список list (назовём его words) — отдельная переменная,
# не относящаяся к классам Word и Sentence.
words = [["собака", "сущ"],
         ["ела", "глагол"],
         ["колбасу", "сущ"],
         ["вечером", "наречие"]]
list_words = []
for word in words:
    word1 = Word(word[0], word[1])
    list_words.append(word1)

prime = Sentence([1, 3])
print(prime.show())
print(prime.show_parts())
